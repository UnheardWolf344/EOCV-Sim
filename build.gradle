import java.nio.file.Paths
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    ext {
        kotlin_version = "1.9.0"
        kotlinx_coroutines_version = "1.5.0-native-mt"
        slf4j_version = "2.0.16"
        log4j_version = "2.24.1"
        opencv_version = "4.7.0-0"
        apriltag_plugin_version = "2.1.0-C"

        skiko_version = "0.8.15"

        classgraph_version = "4.8.112"
        opencsv_version = "5.5.2"

        Penv = findProperty('env')
        if(Penv != null && (Penv != 'dev' && Penv != 'release')) {
            throw new GradleException("Invalid env property, must be 'dev' or 'release'")
        }

        env = Penv == 'release' ? 'release' : 'dev'

        println("Current build is: $env")
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.1'
        classpath 'io.github.fvarrui:javapackager:1.7.6'
    }
}

plugins {
    id 'java'
}

allprojects {
    group 'com.github.deltacv'
    version '3.8.3'

    apply plugin: 'java'

    configurations {
        // do not pull in EOCV-Sim's Common module from a repository, it's already in the project
        runtime.exclude group: "com.github.deltacv.EOCV-Sim", module: "Common"
    }

    ext {
        standardVersion = version
    }

    repositories {
        mavenCentral()
        mavenLocal()

        google()

        maven { url "https://jitpack.io" }
        maven { url 'https://maven.openimaj.org/' }
        maven { url 'https://maven.ecs.soton.ac.uk/content/repositories/thirdparty/' }
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
    }

    tasks.withType(Jar) {
        manifest {
            attributes['Main-Class'] = 'com.github.serivesmejia.eocvsim.Main'
        }
    }

    if(env == 'dev') {
        String date = DateTimeFormatter.ofPattern(
            "yyMMdd-HHmm"
        ).format(LocalDateTime.now())

        String hash = findProperty('hash')

        version += "-dev-${hash ?: date}"
        println("Final version of ${project} is $version")

        File libsFolder = Paths.get(
            projectDir.absolutePath, 'build', 'libs'
        ).toFile()

        for(file in libsFolder.listFiles()) {
             if(file.name.contains("dev") && file.name.endsWith(".jar"))
                file.delete()
        }
    }
}
