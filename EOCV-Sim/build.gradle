import io.github.fvarrui.javapackager.gradle.PackageTask

import java.nio.file.Paths
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow'

    id 'signing'
    id "com.vanniktech.maven.publish" version "0.30.0"

    id 'io.github.fvarrui.javapackager.plugin'
}

apply from: '../build.common.gradle'

ext.kotest_version = '5.7.2'

components.java {
    tasks.named("shadowJar").configure {
        // only run shadowJar when explicitly specified by the user
        // check if user invoked gradle with :shadowJar
        enabled = project.gradle.startParameter.taskNames.contains("shadowJar")
    }
}

shadowJar {
    mergeServiceFiles()
}

test {
    useJUnitPlatform()
}

apply from: '../test-logging.gradle'

tasks.register('pack', PackageTask) {
    dependsOn build
    // mandatory
    mainClass = 'com.github.serivesmejia.eocvsim.Main'
    // optional
    bundleJre = true
    customizedJre = false
    generateInstaller = true
    platform = "auto"

    winConfig {
        icoFile = file('src/main/resources/images/icon/ico_eocvsim.ico')

        generateMsi = false
        disableDirPage = false
        disableProgramGroupPage = false
        disableFinishedPage = false
    }

    linuxConfig {
        pngFile = file('src/main/resources/images/icon/ico_eocvsim.png')
    }
}

dependencies {
    api project(':Common')
    api project(':Vision')

    implementation 'org.jetbrains.kotlin:kotlin-stdlib'

    implementation "org.eclipse.jdt:ecj:3.21.0"

    api "org.openpnp:opencv:$opencv_version"

    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:$log4j_version"

    implementation "org.deltacv.steve:core:1.1.3"
    implementation "org.deltacv.steve:backend-openpnp:1.1.3"

    implementation "info.picocli:picocli:$picocli_version"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation "io.github.classgraph:classgraph:$classgraph_version"

    implementation 'com.formdev:flatlaf:3.5.1'
    implementation 'com.formdev:flatlaf-intellij-themes:3.5.1'
    implementation 'com.miglayout:miglayout-swing:11.4.2'

    implementation("org.java-websocket:Java-WebSocket:1.5.2")

    implementation 'net.lingala.zip4j:zip4j:2.11.3'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-swing:$kotlinx_coroutines_version"

    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core:$kotest_version"

    implementation "com.moandjiezana.toml:toml4j:$toml4j_version"
    implementation 'org.ow2.asm:asm:9.7'

    implementation 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:3.3.2'
    implementation 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven-archive:3.3.2'

    implementation("org.deltacv.PaperVision:EOCVSimPlugin:1.0.6") {
        exclude group: 'org.deltacv.EOCV-Sim'
    }

    implementation('org.deltacv.visionloop:streaming:1.2.7') {
        exclude group: 'org.jetbrains.skiko'
        exclude group: 'org.deltacv'
        exclude group: 'org.deltacv.EOCV-Sim'
        exclude group: 'org.deltacv.steve'
        exclude group: 'org.openpnp'
    }
}

task(writeBuildClassJava) {

    String date = DateTimeFormatter.ofPattern("yyyy-M-d hh:mm:ss").format(LocalDateTime.now())

    File versionFile = Paths.get(
        projectDir.absolutePath, 'src', 'main', 'java',
        'com', 'github', 'serivesmejia', 'eocvsim', 'Build.java'
    ).toFile()

    versionFile.delete()

    versionFile << "package com.github.serivesmejia.eocvsim;\n" +
        "\n" +
        "/*\n" +
        " * Autogenerated file! Do not manually edit this file, as\n" +
        " * it is regenerated any time the build task is run.\n" +
        " *\n" +
        " * Based from PhotonVision PhotonVersion generator task\n"+
        " */\n" +
        "@SuppressWarnings(\"ALL\")\n" +
        "public final class Build {\n" +
        "    public static final String versionString = \"$version\";\n" +
        "    public static final String standardVersionString = \"$standardVersion\";\n" +
        "    public static final String buildDate = \"$date\";\n" +
        "    public static final boolean isDev = ${version.contains("dev")};\n\n" +
        "    public static final String opencvVersion = \"$opencv_version\";\n" +
        "    public static final String apriltagPluginVersion = \"$apriltag_plugin_version\";\n" +
        "}"
}

build.dependsOn writeBuildClassJava
